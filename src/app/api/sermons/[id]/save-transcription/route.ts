import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase';

// API endpoint to save a transcription generated by client-side processing
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // Get the sermon ID from the URL params
    const sermonId = (await params).id;
    if (!sermonId) {
      return NextResponse.json(
        { error: 'Missing sermon ID' },
        { status: 400 }
      );
    }

    const body = await request.json();
    const { transcription } = body;

    if (!transcription) {
      return NextResponse.json(
        { error: 'Missing transcription text' },
        { status: 400 }
      );
    }

    console.log(`Saving transcription for sermon ${sermonId}, length: ${transcription.length} characters`);

    // Make sure the sermon exists
    const { data: sermon, error: fetchError } = await supabaseAdmin
      .from('sermons')
      .select('*')
      .eq('id', sermonId)
      .single();

    if (fetchError || !sermon) {
      console.error('Sermon not found:', fetchError);
      return NextResponse.json(
        { error: 'Sermon not found' },
        { status: 404 }
      );
    }

    // Update the sermon record with the transcription
    const { error: saveError } = await supabaseAdmin
      .from('sermons')
      .update({
        transcription,
        transcriptionstatus: 'completed',
        updatedat: new Date().toISOString(),
      })
      .eq('id', sermonId);

    if (saveError) {
      console.error('Failed to save transcription:', saveError);
      return NextResponse.json(
        { error: `Failed to save transcription: ${saveError.message}` },
        { status: 500 }
      );
    }

    console.log('Transcription saved successfully');

    return NextResponse.json({
      success: true,
      message: 'Transcription saved successfully',
    });
  } catch (error: any) {
    console.error('Error saving transcription:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to save transcription' },
      { status: 500 }
    );
  }
} 